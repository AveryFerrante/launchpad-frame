service cloud.firestore {
  match /databases/{database}/documents {
  	match /usernames/{userId} {
    	allow read: if true;
      allow create: if request.resource.data.userid == request.auth.uid;
    }
    match /users/{userId} {
    	allow create: if isSignedIn();
      allow read, update: if request.auth.uid == userId;
    }
    match /frames/{frameId} {
    	allow create: if isSignedIn();
      allow read: if getUserFramePermissions(frameId) != null;

      match /userInfo/{frameId} {
        allow create: if isSignedIn();
        allow read: if getUserFramePermissions(frameId) != null;
        allow update: if checkUpdateFrameUser(getUserFramePermissions(frameId));
      }

      match /images/{imageId} {
      	allow read: if getUserFramePermissions(frameId) != null;
        allow create: if checkFramePermission('canaddimages', getUserFramePermissions(frameId));
        allow delete: if (request.auth.uid == resource.data.ownderId ||
        	checkFramePermission('canremoveimages', getUserFramePermissions(frameId)) ||
          request.auth.uid == getImageCreator(getImageIdFromFrame(frameId, imageId)));
      }
    }
    match /images/{imageId} {
    	allow create: if request.auth.uid == request.resource.data.createdBy;

      match /frameInfo/{frameId} {
        allow create: if true;//if request.auth.uid == getImageCreator(imageId, database);
        allow delete: if request.auth.uid == getImageCreator(imageId) ||
        checkFramePermission('canremoveimages', getUserFramePermissions(frameId));
      }
    }
    match /imageFrameCounts/{imageId} {
    	allow create: if getAfter(/databases/$(database)/documents/images/$(imageId)) != null;
      allow update: if true;
    }
    match /notifications/{notifId} {
    	allow read: if request.auth.uid == resource.data.foruser;
      allow delete: if request.auth.uid == resource.data.foruser;
    	allow create: if request.auth.uid == request.resource.data.fromuser && 
        // Adding someone to frame
        (request.resource.data.type == 1 && request.resource.data.action == 1 && checkAddUserToFramePermission())
    }
    function checkAddUserToFramePermission() {
			return checkFramePermission('canaddusers', getUserFramePermissions(request.resource.data.frameId));
    }
    function checkUpdateFrameUser(existingData) {
    	return (checkFramePermission('canaddusers', existingData) ||
      	checkSelfUpdatingPictureCount(existingData)
      );
    }
    function checkSelfUpdatingPictureCount(existingData) {
    	return 
      (
      	request.resource.data.users.size() == 1 &&
        checkPictureCountFieldUpdate(request.resource.data.users[request.auth.uid], existingData) ||
        (
          // checkFramePermission('canremoveimages', existingData) &&
          // (
          //   request.resource.data.users[request.resource.data.users.keys()[0]].role == existingData.role &&

          // )
          false
        )
      );
    }
    function checkPictureCountFieldUpdate(incomingData, existingData) {
      (
        incomingData.pictureCount == (existingData.pictureCount + 1) ||
        incomingData.pictureCount == (existingData.pictureCount - 1)
      ) &&
      incomingData.role == existingData.role &&
      incomingData.username == existingData.username &&
      incomingData.joined == existingData.joined &&
      incomingData.permissions == existingData.permissions
    }
    function isSignedIn() {
    	return request.auth.uid != null;
    }
    function getUserFramePermissions(frameId) {
      return get(/databases/$(database)/documents/frames/$(frameId)/userInfo/$(frameId)).data.users[request.auth.uid];
    }
    function checkFramePermission(permission, userPermissions) {
      return (permission in userPermissions.permissions || userPermissions.role == 'owner');
    }
    function getImageCreator(imageId) {
      return get(/databases/$(database)/documents/images/$(imageId)).data.createdBy;
    }
    function getImageIdFromFrame(frameId, imageId) {
    	return get(/databases/$(database)/documents/frames/$(frameId)/images/$(imageId)).data.imageId;
    }
	}
}