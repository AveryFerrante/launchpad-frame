service cloud.firestore {
  match /databases/{database}/documents {
  	match /usernames/{userId} {
    	allow read: if true;
      allow create: if request.resource.data.info[request.auth.uid] == true;
    }
    match /users/{userId} {
    	allow create: if isSignedIn();
      allow read, update: if request.auth.uid == userId;
    }
    match /frames/{frameId} {
    	allow create: if isSignedIn();
      allow read: if getUserFramePermissions(frameId, database) != null;

      match /userInfo/{frameId} {
        allow create: if isSignedIn();
      }

      match /images/{imageId} {
      	allow read: if getUserFramePermissions(frameId, database) != null;
        allow create: if checkFramePermission('canaddimages', getUserFramePermissions(frameId, database));
        allow delete: if checkFramePermission('canremoveimages', getUserFramePermissions(frameId, database));
      }
    }
    match /images/{imageId} {
    	allow create: if request.auth.uid == request.resource.data.createdBy;

      match /frameInfo/{frameId} {
        allow create: if true;//if request.auth.uid == getImageCreator(imageId, database);
        allow delete: if checkFramePermission('canremoveimages', getUserFramePermissions(frameId, database));
      }
    }
  }
  function isSignedIn() {
    return request.auth.uid != null;
  }
  function getUserFramePermissions(frameId, database) {
    return get(/databases/$(database)/documents/frames/$(frameId)/userInfo/$(frameId)).data.users[request.auth.uid];
  }
  function checkFramePermission(permission, userPermissions) {
    return (permission in userPermissions.permissions || userPermissions.role == 'owner');
  }
  function getImageCreator(imageId, database) {
    return get(/databases/$(database)/documents/images/$(imageId)).data.createdBy;
  }
}